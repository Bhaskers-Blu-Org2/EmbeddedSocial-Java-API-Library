/**
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
 * the MIT License. See LICENSE in the project root for license information.
 * <autogenerated> This file was generated using AutoRest. </autogenerated>
 */

package com.microsoft.embeddedsocial.autorest;

import com.microsoft.embeddedsocial.autorest.models.FeedResponseUserCompactView;
import com.microsoft.embeddedsocial.autorest.models.PostBlockedUserRequest;
import es_private.com.microsoft.rest.ServiceCall;
import es_private.com.microsoft.rest.ServiceCallback;
import es_private.com.microsoft.rest.ServiceException;
import es_private.com.microsoft.rest.ServiceResponse;
import java.io.IOException;

/**
 * An instance of this class provides access to all the operations defined
 * in MyBlockedUsersOperations.
 */
public interface MyBlockedUsersOperations {
    /**
     * Get my blocked users.
     * This is a feed of users that I have blocked. Any user on this list
     *             cannot see topics authored by me. However, any such user will see comments
     *             and replies that I create on topics authored by other users or by the app.
     *             Any such user will also be able to observe that activities have been performed
     *             by users on my topics.
     *             I will not appear in any such user's following feed, and those users will not
     *             appear in my followers feed.
     *             If I am following any user in this feed, that relationship will continue and I
     *             will continue to see topics and activities by that user and I will appear in
     *             that user's follower feed and that user will appear in my following feed.
     *
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseUserCompactView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseUserCompactView> getBlockedUsers(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get my blocked users.
     * This is a feed of users that I have blocked. Any user on this list
     *             cannot see topics authored by me. However, any such user will see comments
     *             and replies that I create on topics authored by other users or by the app.
     *             Any such user will also be able to observe that activities have been performed
     *             by users on my topics.
     *             I will not appear in any such user's following feed, and those users will not
     *             appear in my followers feed.
     *             If I am following any user in this feed, that relationship will continue and I
     *             will continue to see topics and activities by that user and I will appear in
     *             that user's follower feed and that user will appear in my following feed.
     *
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getBlockedUsersAsync(String authorization, final ServiceCallback<FeedResponseUserCompactView> serviceCallback) throws IllegalArgumentException;
    /**
     * Get my blocked users.
     * This is a feed of users that I have blocked. Any user on this list
     *             cannot see topics authored by me. However, any such user will see comments
     *             and replies that I create on topics authored by other users or by the app.
     *             Any such user will also be able to observe that activities have been performed
     *             by users on my topics.
     *             I will not appear in any such user's following feed, and those users will not
     *             appear in my followers feed.
     *             If I am following any user in this feed, that relationship will continue and I
     *             will continue to see topics and activities by that user and I will appear in
     *             that user's follower feed and that user will appear in my following feed.
     *
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseUserCompactView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseUserCompactView> getBlockedUsers(String authorization, String cursor, Integer limit) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get my blocked users.
     * This is a feed of users that I have blocked. Any user on this list
     *             cannot see topics authored by me. However, any such user will see comments
     *             and replies that I create on topics authored by other users or by the app.
     *             Any such user will also be able to observe that activities have been performed
     *             by users on my topics.
     *             I will not appear in any such user's following feed, and those users will not
     *             appear in my followers feed.
     *             If I am following any user in this feed, that relationship will continue and I
     *             will continue to see topics and activities by that user and I will appear in
     *             that user's follower feed and that user will appear in my following feed.
     *
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getBlockedUsersAsync(String authorization, String cursor, Integer limit, final ServiceCallback<FeedResponseUserCompactView> serviceCallback) throws IllegalArgumentException;

    /**
     * Block a user.
     * After I block a user, that user will no longer be able to see topics authored by me.
     *             However, that user will continue to see comments and replies that I create on
     *             topics authored by other users or by the app. That user will also be able to observe
     *             that activities have been performed by users on my topics.
     *             I will no longer appear in that user's following feed, and that user will no longer
     *             appear in my followers feed.
     *             If I am following that user, that relationship will survive and I will continue to see
     *             topics and activities by that user and I will appear in that user's follower feed and
     *             that user will appear in my following feed.
     *
     * @param request Post blocked user request
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> postBlockedUser(PostBlockedUserRequest request, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Block a user.
     * After I block a user, that user will no longer be able to see topics authored by me.
     *             However, that user will continue to see comments and replies that I create on
     *             topics authored by other users or by the app. That user will also be able to observe
     *             that activities have been performed by users on my topics.
     *             I will no longer appear in that user's following feed, and that user will no longer
     *             appear in my followers feed.
     *             If I am following that user, that relationship will survive and I will continue to see
     *             topics and activities by that user and I will appear in that user's follower feed and
     *             that user will appear in my following feed.
     *
     * @param request Post blocked user request
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall postBlockedUserAsync(PostBlockedUserRequest request, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

    /**
     * Unblock a user.
     *
     * @param userHandle Handle of blocked user
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> deleteBlockedUser(String userHandle, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Unblock a user.
     *
     * @param userHandle Handle of blocked user
     * @param authorization Format is: "Scheme CredentialsList". Possible values are:
     - Anon AK=AppKey
     - SocialPlus TK=SessionToken
     - Facebook AK=AppKey|TK=AccessToken
     - Google AK=AppKey|TK=AccessToken
     - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     - Microsoft AK=AppKey|TK=AccessToken
     - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteBlockedUserAsync(String userHandle, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

}
